{"version":3,"file":"static/js/597.b41287fb.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.module.css","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Pages/ContactPage/ContactPage.module.css?0a20","components/Pages/ContactPage/ContactPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"label\":\"ContactForm_label__-cVXI\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport style from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, addContact } from 'Redux/contacts-operation';\nimport { getContacts } from 'Redux/contactSlice';\nimport { useEffect } from 'react';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  },[dispatch])\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const upgradeContacts = ({ name, number }) => {\n    const contact = {\n      name,\n      number,\n      id: nanoid(),\n    };\n    contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contact`)\n      : dispatch(addContact(contact));\n  };\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n    upgradeContacts({ name, number });\n    reset();\n  };\n\n  const handlerChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form className={style.form} onSubmit={handlerSubmit}>\n      <label className={style.label}>\n        Name\n        <input\n          className={style.input}\n          type=\"text\"\n          onChange={handlerChange}\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label className={style.label}>\n        Number\n        <input\n          className={style.input}\n          type=\"tel\"\n          onChange={handlerChange}\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button className={style.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {};","import style from './ContactItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { removeContact } from 'Redux/contacts-operation';\nfunction ContactItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  return (\n    <li key={id} className={style.item}>\n      {name} : <span className={style.item}>{number}</span>\n      <button\n        type=\"button\"\n        className={style.button}\n        onClick={() => {\n          dispatch(removeContact(id));\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default ContactItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilteredContact } from 'Redux/contactSlice';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilteredContact);\nconsole.log(contacts);\n  const getVisibleContact = () => {\n    const normalizedfilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedfilter)\n    );\n  };\n  return (\n    <ul>\n      {getVisibleContact().map(({ name, number, id }) => (\n        <ContactItem key={id} name={name} id={id} number={number} />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"flex\":\"Filter_flex__OzNjW\",\"input\":\"Filter_input__N7T3z\",\"label\":\"Filter_label__vEd1E\"};","import React from 'react';\nimport style from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getFilteredContact\n} from 'Redux/contactSlice';\nimport {filterContact} from 'Redux/contactSlice';\n\nexport default function Filter() {\nconst dispatch = useDispatch();\n  const filter = useSelector(getFilteredContact);\n  const changeFilter = e => dispatch(filterContact(e.target.value));\n\n  return (\n    <div className={style.flex}>\n      <label className={style.label}>Find contact by name</label>\n      <input\n        className={style.input}\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n      ></input>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactPage_wrapper__38Ovi\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport style from 'components/Pages/ContactPage/ContactPage.module.css';\nexport default function ContactPage() {\n  return (\n    <div className={style.wrapper}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getContacts","useEffect","fetchContacts","handlerChange","e","currentTarget","value","className","style","onSubmit","preventDefault","contact","find","toLowerCase","alert","addContact","upgradeContacts","type","onChange","pattern","title","required","onClick","removeContact","filter","getFilteredContact","console","log","normalizedfilter","includes","getVisibleContact","map","Filter","filterContact","target","ContactPage"],"sourceRoot":""}